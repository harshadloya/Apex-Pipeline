package edu.bing.simulator;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import edu.bing.beans.Instruction;
import edu.bing.beans.Register;
import edu.bing.loader.InstructionLoader;

public class Apex {

	boolean initialized = false;
	private static int MEM_LENGTH = 10000;
	int PC_value = 4000;
	int result_inEx1ALU2, result_inEx1ALU1, result_inEx2ALU2, result_inEx2ALU1, result_inWb;
	Integer result_inMem;
	int literal_zero = 0000;
	int offset = 0;
	HashMap<Integer, Object> memory = new HashMap<Integer, Object>();
	public static int branchPCValue = 0;

	Scanner sc = new Scanner(System.in);
	static ArrayList<Instruction> instructionsToProcess = new ArrayList<Instruction>();
	boolean wb, mem, ex1a1, ex1a2, ex2a1, ex2a2, decode, fetch, branch, halt, set_exStage2, set_exStage1, jump_flag,
			branch_instr, src1IsDependent, src2IsDependent, src3IsDependent;
	boolean stall_fetch, stall_decode, stall_exstage, stall_mem, stall_wb;
	Instruction inFetch, inDecode, inEx1ALU1, inEx1ALU2, inEx2ALU1, inEx2ALU2, inMem, inWb;

	HashMap<String, Register> registerFile = new HashMap<String, Register>();
	HashMap<String, Register> shadowRegisterFile = new HashMap<String, Register>();
	public static int NextInstructionBAL = 0;

	void operations() throws IOException {
		while (true) {
			System.out.println("Select an Option for Simulator: ");
			System.out.println("1. Initialise \n2. Simulate\n3. Display\n4. Exit");
			int choice = sc.nextInt();
			switch (choice) {
			case 1:
				initialize();
				break;
			case 2:
				simulate();
				break;
			case 3:
				display();
				break;
			case 4:
				System.exit(0);
			}
		}
	}

	void initialize() {
		initialized = true;
		for (int i = 0; i < MEM_LENGTH; i++) {
			memory.put(i, new Integer(0));
		}

		for (int n = 0; n < 16; n++) {
			Register r = new Register();
			r.setReg_name("R" + n);
			r.setStatus(0);
			registerFile.put("R" + n, r);
			shadowRegisterFile.put("R" + n, r);
		}
		Register r = new Register();
		r.setReg_name("X");
		registerFile.put("X", r);
		shadowRegisterFile.put("X", r);
		System.out.println("Initialized...");
	}

	void simulate() throws IOException {
		if (!initialized) {
			System.out.println("Please initialize the simulator");
		} else {
			InstructionLoader isl = new InstructionLoader("./Instructions.txt");
			ArrayList<Instruction> instructionsToProcess = new ArrayList<Instruction>();
			instructionsToProcess = (ArrayList<Instruction>) isl.loadInstructions();
			int i = PC_value, j = 0;
			for (j = 0; j < instructionsToProcess.size(); j++) {
				memory.put(i, instructionsToProcess.get(j));
				i += 4;
			}

			System.out.println("Enter the Number of Cycles for Simulation");
			int numberOfCycles = sc.nextInt(); // Actual Code Line
			for (int n = 0; n < numberOfCycles; n++) {
				if (!(fetch && decode && ex1a1 && ex1a2 && ex2a1 && ex2a2 && mem && wb)) // if
																							// all
																							// stages
																							// are
																							// empty
				{
					wbStage(n);
				}

			}
		}
	}

	void wbStage(int n) {
		wb = true;
		if (mem) {
			mem = false;
			inWb = inMem;
			result_inWb = result_inMem;
			if (!(inWb.getInstr_type().equalsIgnoreCase("STORE") || inWb.getInstr_type().equalsIgnoreCase("HALT")
					|| inWb.getInstr_type().equalsIgnoreCase("BNZ") || inWb.getInstr_type().equalsIgnoreCase("BZ")
					|| inWb.getInstr_type().equalsIgnoreCase("BAL") || inWb.getInstr_type().equalsIgnoreCase("JUMP"))) {
				registerFile.get(inWb.getDest()).setReg_value(result_inWb);
				registerFile.get(inWb.getDest()).setStatus(0);
				// System.out.println(registerFile.get(inWb.getDest()));
			}
			wb = false;
			if (inWb.getInstr_type().equalsIgnoreCase("HALT")) {
				halt = true;
			}
			memStage(n);

		} else {
			memStage(n);
		}
	}

	void memStage(int n) {
		if (ex1a2 || ex2a2) {
			if (ex1a2) {
				mem = true;
				ex1a2 = false;
				inMem = inEx1ALU2;
				if (!(inMem.getInstr_type().equalsIgnoreCase("LOAD") || inMem.getInstr_type().equalsIgnoreCase("STORE"))) 
				{
					result_inMem = result_inEx1ALU2;
					if (!inMem.getDest().isEmpty() && registerFile.get(inMem.getDest()).getStatus() == 1)
						registerFile.get(inMem.getDest()).setStatus(0);
				} 
				else 
				{
					result_inMem = (Integer) memory.get(result_inEx1ALU2);
					if (inMem.getInstr_type().equalsIgnoreCase("LOAD")) {
						shadowRegisterFile.get(inMem.getDest()).setReg_value(result_inMem);
					}

					if (inMem.getInstr_type().equalsIgnoreCase("STORE")) {
						memory.put(result_inMem, inMem.getSrc3_value());
					}
				}

			}
			if (ex2a2) {
				mem = true;
				ex2a2 = false;
				inMem = inEx2ALU2;
			}
			exStage(n);
		}

		else {
			mem = false;
			exStage(n);
		}

	}

	// this will ensure that both EX stages are called in one cycle
	void exStage(int n) {

		exStage1ALU2(n);
		exStage1ALU1(n);

		ex_branchDelayStage(n);
		ex_branchStage(n);

		decodeStage(n);
	}

	void exStage1ALU2(int n) {
		if (ex1a1) {
			ex1a2 = true;
			ex1a1 = false;
			set_exStage1 = false;
			inEx1ALU2 = inEx1ALU1;
			switch (inEx1ALU2.getInstr_type()) {
			case "ADD":
				result_inEx1ALU2 = inEx1ALU2.getSrc1_value() + inEx1ALU2.getSrc2_value();
				shadowRegisterFile.get(inEx1ALU2.getDest()).setReg_value(result_inEx1ALU2);
				if (registerFile.get(inEx1ALU2.getDest()).getStatus() == 1)
					registerFile.get(inEx1ALU2.getDest()).setStatus(0);
				break;

			case "SUB":
				result_inEx1ALU2 = inEx1ALU2.getSrc1_value() - inEx1ALU2.getSrc2_value();
				shadowRegisterFile.get(inEx1ALU2.getDest()).setReg_value(result_inEx1ALU2);
				if (registerFile.get(inEx1ALU2.getDest()).getStatus() == 1)
					registerFile.get(inEx1ALU2.getDest()).setStatus(0);
				break;

			case "MUL":
				result_inEx1ALU2 = inEx1ALU2.getSrc1_value() * inEx1ALU2.getSrc2_value();
				shadowRegisterFile.get(inEx1ALU2.getDest()).setReg_value(result_inEx1ALU2);
				if (registerFile.get(inEx1ALU2.getDest()).getStatus() == 1)
					registerFile.get(inEx1ALU2.getDest()).setStatus(0);
				break;

			case "AND":
				result_inEx1ALU2 = inEx1ALU2.getSrc1_value() & inEx1ALU2.getSrc2_value();
				shadowRegisterFile.get(inEx1ALU2.getDest()).setReg_value(result_inEx1ALU2);
				if (registerFile.get(inEx1ALU2.getDest()).getStatus() == 1)
					registerFile.get(inEx1ALU2.getDest()).setStatus(0);
				break;

			case "OR":
				result_inEx1ALU2 = inEx1ALU2.getSrc1_value() | inEx1ALU2.getSrc2_value();
				shadowRegisterFile.get(inEx1ALU2.getDest()).setReg_value(result_inEx1ALU2);
				if (registerFile.get(inEx1ALU2.getDest()).getStatus() == 1)
					registerFile.get(inEx1ALU2.getDest()).setStatus(0);
				break;

			case "EX-OR":
				result_inEx1ALU2 = inEx1ALU2.getSrc1_value() ^ inEx1ALU2.getSrc2_value();
				shadowRegisterFile.get(inEx1ALU2.getDest()).setReg_value(result_inEx1ALU2);
				if (registerFile.get(inEx1ALU2.getDest()).getStatus() == 1)
					registerFile.get(inEx1ALU2.getDest()).setStatus(0);
				break;

			case "MOVC":
				result_inEx1ALU2 = inEx1ALU2.getSrc1_value() + literal_zero;
				shadowRegisterFile.get(inEx1ALU2.getDest()).setReg_value(result_inEx1ALU2);
				if (registerFile.get(inEx1ALU2.getDest()).getStatus() == 1)
					registerFile.get(inEx1ALU2.getDest()).setStatus(0);
				break;

			case "LOAD":
			case "STORE":
				result_inEx1ALU2 = inEx1ALU2.getSrc1_value() + inEx1ALU2.getLiteral();
				break;
			}

		} else {
			ex1a2 = false;
		}

	}

	private void updateSrcValues(Instruction current) {
		if (src1IsDependent && !branch_instr) {
			inEx1ALU1.setSrc1_value(shadowRegisterFile.get(current.getSrc1()).getReg_value());
			src1IsDependent = false;
		} else if (src1IsDependent && branch_instr) {
			inEx2ALU1.setSrc1_value(shadowRegisterFile.get(current.getSrc1()).getReg_value());
			src1IsDependent = false;
		} else if (src2IsDependent) {
			inEx1ALU1.setSrc2_value(shadowRegisterFile.get(current.getSrc2()).getReg_value());
			src2IsDependent = false;
		} else if (src3IsDependent) {
			inEx1ALU1.setSrc3_value(shadowRegisterFile.get(current.getSrc3()).getReg_value());
			src3IsDependent = false;
		}
	}

	void checkDependency(Instruction current, Instruction previous) {
		if (current != null && previous != null) {
			if (previous.getDest().equals(current.getSrc1()))
				src1IsDependent = true;
			else if (previous.getDest().equals(current.getSrc2()))
				src2IsDependent = true;
			else if (previous.getDest().equals(current.getSrc3()))
				src3IsDependent = true;
		}
	}

	void exStage1ALU1(int n) {
		if (decode && !branch_instr) // && !stall_decode)
		{
			ex1a1 = true;
			decode = false;
			inEx1ALU1 = inDecode;
			updateSrcValues(inEx1ALU1);
		} else {
			ex1a1 = false;
		}
	}

	void ex_branchDelayStage(int n) {
		if (ex2a1) {
			ex2a2 = true;
			ex2a1 = false;
			set_exStage2 = false;
			inEx2ALU2 = inEx2ALU1;
			if (branch) {
				branch = false;
				jump_flag = true;
				// ex2a2=ex2a1=ex1a1=ex1a2=false;//flush instructions in EX
				// stages
			}
		} else
			ex2a1 = false;

	}

	void ex_branchStage(int n) {

		if (decode && branch_instr) {
			ex2a1 = true;
			decode = false;
			inEx2ALU1 = inDecode;
			branch_instr = false;
			updateSrcValues(inEx2ALU1);

			switch (inEx2ALU1.getInstr_type()) {
			case "HALT":
				break;

			case "BZ":
				if (result_inEx1ALU2 == 0) {

					int pcValueForBranch = branchPCValue;
					PC_value = pcValueForBranch + inEx2ALU1.getLiteral(); // updated
																			// PC
																			// value
					branchPCValue = 0;
					// System.out.println("PC value updated: " + PC_value);
					branch = true;
				}
				break;

			case "JUMP":
				PC_value = inEx2ALU1.getSrc1_value() + inEx2ALU1.getLiteral();
				// System.out.println("PC value updated: " + PC_value);
				branch = true;
				break;

			case "BNZ":
				if (result_inEx1ALU2 != 0) {
					int pcValueForBranch = branchPCValue;
					PC_value = pcValueForBranch + inEx2ALU1.getLiteral();
					branchPCValue = 0;
					// System.out.println("PC value updated: " + PC_value);
					branch = true;
				}
				break;

			case "BAL":
				shadowRegisterFile.get("X").setReg_value(NextInstructionBAL);
				PC_value = shadowRegisterFile.get(inEx2ALU1.getSrc1()).getReg_value() + inEx2ALU1.getLiteral();
				branch = true;
				break;
			}
		} else
			ex2a1 = false;
	}

	void decodeStage(int n) {
		if (stall_decode || jump_flag) {
			if (stall_decode) {
				stall_fetch = true;
			}
			decode = false;
			fetchStage(n);
		} else if (fetch) {
			decode = true;
			int source1, source2, source3, literal;
			Instruction previousInstruction = null;
			previousInstruction = inDecode;
			inDecode = inFetch;
			if (!inDecode.equals(previousInstruction))
				checkDependency(inDecode, previousInstruction);

			switch (inDecode.getInstr_type()) {
			case "ADD":
			case "SUB":
			case "MUL":
			case "AND":
			case "OR":
			case "EX-OR":
			case "LOAD":
				if (registerFile.get(inDecode.getSrc1()).getStatus() == 1) {
					// System.out.println("Destination register busy.");
					stall_fetch = true;
					stall_decode = true;
					break;
				} else if (inDecode.getSrc2() != null && registerFile.get(inDecode.getSrc2()).getStatus() == 1) {
					// System.out.println("Destination register busy.");
					stall_fetch = true;
					stall_decode = true;
					break;
				} else {
					source1 = registerFile.get(inDecode.getSrc1()).getReg_value();
					inDecode.setSrc1_value(source1);
					if (inDecode.getSrc2() != null) {
						source2 = registerFile.get(inDecode.getSrc2()).getReg_value();
						inDecode.setSrc2_value(source2);
					} else {
						literal = inDecode.getLiteral();
						inDecode.setSrc2_value(literal);
					}
					branch_instr = false;
					set_exStage1 = true;
					registerFile.get(inDecode.getDest()).setStatus(1);
				}
				break;

			case "BAL":
				if (registerFile.get(inDecode.getSrc1()).getStatus() == 1) {
					// System.out.println("Destination register busy.");
					stall_fetch = true;
					stall_decode = true;
					break;
				} else {
					source1 = registerFile.get(inDecode.getSrc1()).getReg_value();
					inDecode.setSrc1_value(source1);
				}
			case "BZ":
			case "BNZ":
				stall_decode = true;
			case "HALT":

				// literal = inDecode.getLiteral();
				// inDecode.setSrc2_value(literal);
				inDecode.setDest("");
				branch_instr = true;
				break;
			case "JUMP":
				if (registerFile.get(inDecode.getSrc1()) !=null && registerFile.get(inDecode.getSrc1()).getStatus() == 1) {
					// System.out.println("Destination register busy.");
					stall_fetch = true;
					stall_decode = true;
					break;
				} else {
					if(registerFile.get(inDecode.getSrc1())!=null)
					{
					source1 = registerFile.get(inDecode.getSrc1()).getReg_value();
					inDecode.setSrc1_value(source1);
					inDecode.setDest("");
					set_exStage2 = true;
					branch_instr = true;
					}
				}
				break;

			case "MOVC":
				if (registerFile.get(inDecode.getDest()).getStatus() == 1) {
					// System.out.println("Destination register busy in MOVC.");
					stall_fetch = true;
					stall_decode = true;
					break;
				} else {
					source1 = inDecode.getLiteral();
					inDecode.setSrc1_value(source1);
					branch_instr = false;
					registerFile.get(inDecode.getDest()).setStatus(1);
					break;
				}

			case "STORE":
				if (registerFile.get(inDecode.getSrc1()).getStatus() == 1) {
					// System.out.println("Destination register busy.");
					stall_fetch = true;
					stall_decode = true;
					break;
				} else if (inDecode.getSrc3() != null && registerFile.get(inDecode.getSrc3()).getStatus() == 1) {
					// System.out.println("Destination register busy.");
					stall_fetch = true;
					stall_decode = true;
					break;
				} else {
					source1 = registerFile.get(inDecode.getSrc1()).getReg_value();
					inDecode.setSrc1_value(source1);
					source3 = registerFile.get(inDecode.getSrc3()).getReg_value();
					inDecode.setSrc3_value(source3);
					if (inDecode.getSrc2() != null) {
						source2 = registerFile.get(inDecode.getSrc2()).getReg_value();
						inDecode.setSrc2_value(source2);
					} else {
						literal = inDecode.getLiteral();
						inDecode.setSrc2_value(literal);
					}
					set_exStage1 = true;
					branch_instr = false;
					inDecode.setDest("");
				}
				break;
			}
			fetchStage(n);
		} else {
			decode = false;
			fetchStage(n);
		}

	}

	void fetchStage(int n) {
		if (memory.get(PC_value).equals(new Integer(0)) || stall_fetch || halt) {
			if (stall_fetch)
				stall_fetch = false;
			if (jump_flag)
				jump_flag = false;
			if (stall_decode)
				stall_decode = false;
			if (halt)
				fetch = decode = ex1a1 = ex1a2 = ex2a1 = ex2a2 = mem = wb = true;
		} else {
			jump_flag = false;
			fetch = true;
			inFetch = (Instruction) memory.get(PC_value);
			if (inFetch.getInstr_type().equals("BNZ") || inFetch.getInstr_type().equals("BZ")) {
				branchPCValue = PC_value;
			}
			if (inFetch.getInstr_type().equals("BAL")) {
				NextInstructionBAL = PC_value + 4;
			}
			PC_value = PC_value + 4;
			offset += 4;
		}
	}

	void display() {
		String[] stages = { "FETCH", "DECODE", "BRANCH_FU", "DELAY_FU", "INT_ALU1", "INT_ALU2", "MEMORY", "WRITEBACK" };
		Instruction[] instructions = { inFetch, inDecode, inEx2ALU1, inEx2ALU2, inEx1ALU1, inEx1ALU2, inMem, inWb };
		System.out.println("Instruction currently in the pipeline:\n");
		for (int i = 0; i < 8; i++) {
			if (instructions.length > 0) {
				System.out.println("Instruction in " + stages[i] + ":" + instructions[i]);
			} else {
				System.out.println(stages[i] + " " + "is empty");
			}

		}
		System.out
				.print("****************************************************************************************************"
						+ "\n");

		System.out.println("Register File :\n");

		for (Map.Entry<String, Register> entry : registerFile.entrySet()) {
			System.out.println("Key: " + entry.getKey() + ": Value: " + entry.getValue());
		}

		System.out
				.print("****************************************************************************************************"
						+ "\n");
		System.out.println("Memory Content :\n");
		for (int i = 0; i <= 150; i++) {
			System.out.println("MemoryLocation-" + i + "=> " + memory.get(i));
		}
	}

	public static void main(String[] args) throws IOException {
		System.out.println("Starting simulator...");
		Apex ap = new Apex();
		ap.operations();
	}

}